#include <string.h>
#include "arm_math.h"
#include "ServoController.h"
#include "Peripheral.h"

#define STOP_COUNT 			(17)

static float AtA[4][4];
static float AtB[4];

static float J [STOP_COUNT];
static float Bv[STOP_COUNT];
static float Bc[STOP_COUNT];
static float Tl[STOP_COUNT];

float Average (float *d, int32_t n);
float AverageWoNeg (float *d, int32_t n);
int32_t FindMaxDiff (float *d, int32_t n, float avg);
float AverageWithoutOutlier (float *d, int32_t n, int32_t no_outlier);
int32_t SquareGenerate (int32_t angle);

void ServoController::InitMachanicParameterEstimator(void)
{
	for (int32_t i=0; i<STOP_COUNT; i++) {
		J[i] = Bv[i] = Bc[i] = Tl[i] = 0.0f;
	}

	memset (AtA, 0, sizeof(float)*4*4);
	memset (AtB, 0, sizeof(float)*4*1);
	theta_dt = 0;

	run_count = 0;	// 테스트 시작
	run_count_prev = 0;
}

void ServoController::RunMachanicParameterEstimatorOnCurrentController(void)
{
	int32_t wave_freq[STOP_COUNT] = { 33, 24, 16, 12, 8, 6, 4, 3, 2, 3, 4, 6, 8, 12, 16, 24, 33 };
	int32_t cur_div[STOP_COUNT] =   {  4,  3,  2,  2, 3, 3, 4, 4, 4, 4, 4, 3, 3,  2,  2,  3,  4 };
	
	if (0 <= run_count && run_count < STOP_COUNT) {
		int32_t angle = (int32_t)(theta_dt/(int32_t)CURRENT_CONTROLLER_FREQ)%360;
		int32_t count = (int32_t)(theta_dt/(int32_t)CURRENT_CONTROLLER_FREQ)/360;

		//bool  cbreak = false;
		float cout = _ratedCurrent*1.0f/cur_div[run_count]*SquareGenerate (angle);

		/*
		if (use_soft_limit) {
			if      (cout > 0 && position >= max_position) cbreak = true;
			else if (cout < 0 && position <= min_position) cbreak = true;
		}
		
		if (cbreak) GoVoltage (0);
		else        GoCurrent (cout);
		*/
		SetDAxisTargetCurrent(0.0f);
		SetQAxisTargetCurrent(cout);

		theta_dt += 360*wave_freq[run_count];

		if (count >= wave_freq[run_count]) {
			theta_dt = 0;

			run_count++;
		}
	}
	else {
		SetDAxisTargetCurrent(0.0f);
		SetQAxisTargetCurrent(0.0f);
	}
}

void ServoController::RunMachanicParameterEstimatorOnVelocityController(void)
{
	// Te = J*a + Bv*w + Bc*w/|w| + Tl     (Tl = 0)
	// Te = 3/2*(Ke*w + P*(Ld - Lq)*id*iq
	if (0 <= run_count && run_count <= STOP_COUNT) {
		float a  = _actualAcceleration;
		float w  = _actualVelocity;
		float s  = Sign_f(_actualVelocity);
		//float Te = (_Kt*_qAxisActualCurrent + _polePairs*(_Ld - _Lq)*_dAxisActualCurrent*_qAxisActualCurrent);
		//float Te = _Kt*_qAxisActualCurrent;
		float Te = _Kt*_actualCurrent;

		AtA[0][0] += a*a;	AtA[0][1] += a*w;	AtA[0][2] += a*s;	AtA[0][2] += a*1;
		AtA[1][0] += w*a;	AtA[1][1] += w*w;	AtA[1][2] += w*s;	AtA[1][3] += w*1;
		AtA[2][0] += s*a;	AtA[2][1] += s*w;	AtA[2][2] += s*s;	AtA[2][3] += s*1;
		AtA[3][0] += 1*a;	AtA[3][1] += 1*w;	AtA[3][2] += 1*s;	AtA[3][3] += 1*1;

		AtB[0] += a*Te;		AtB[1] += w*Te;		AtB[2] += s*Te;		AtB[2] += 1*Te;

		if (run_count_prev != run_count) {
			float AtAi[4][4];

			arm_matrix_instance_f32 ata = { 4, 4, &AtA[0][0]  };
			arm_matrix_instance_f32 atb = { 4, 1, &AtB[0]     };
			arm_matrix_instance_f32 atai= { 4, 4, &AtAi[0][0] };

			if (ARM_MATH_SUCCESS == arm_mat_inverse_f32(&ata, &atai)) {
				float x_data[4];
				arm_matrix_instance_f32 x = { 4, 1, &x_data[0] };

				arm_mat_mult_f32 (&atai, &atb, &x);

				J [run_count-1] = x_data[0];
				Bv[run_count-1] = x_data[1];
				Bc[run_count-1] = x_data[2];
				Tl[run_count-1] = x_data[3];
			}
			else {
				J [run_count-1] = 0;
				Bv[run_count-1] = 0;
				Bc[run_count-1] = 0;
				Tl[run_count-1] = 0;
			}

			memset (AtA, 0, sizeof(float)*4*4);
			memset (AtB, 0, sizeof(float)*4*1);

			run_count_prev = run_count;
		}
		if (run_count == STOP_COUNT) {
			int cntJ  = 0;
			int cntBv = 0;
			int cntBc = 0;

			for (int32_t i=0; i<STOP_COUNT; i++) {
				if (J[i]  > 0) cntJ  ++;
				if (Bv[i] > 0) cntBv ++;
				if (Bc[i] > 0) cntBc ++;
			}

			if (cntJ > STOP_COUNT/3 /*&& cntBv > STOP_COUNT/3 && cntBc > STOP_COUNT/3*/) {
				//	Success
				_Jm = AverageWithoutOutlier (J,  STOP_COUNT, cntJ/8);
				_Fv = (cntBv > STOP_COUNT/3) ? AverageWithoutOutlier (Bv, STOP_COUNT, cntBv/8) : 0;
				_Fc = (cntBc > STOP_COUNT/3) ? AverageWithoutOutlier (Bc, STOP_COUNT, cntBc/8) : 0;
				_Tl = Average (Tl, STOP_COUNT);
				
				
				_kalmanFilter.Init();
				_canOpenCia402->_systemInertia = (uint32_t)(_Jm * 10000000000.0f);
				_canOpenCia402->_coulombFriction = (uint32_t)(_Fc * 1000000.0f);
				_canOpenCia402->_viscosFriction = (uint32_t)(_Fv * 1000000.0f);
								
				_canOpenCia402->_velocityPGain = (uint16_t)(_Jm*_wcv/_Kt * 10000.0f);
				_canOpenCia402->_velocityIGain = (uint16_t)(_Jm*_wcv/_Kt * _wcv/5.0f*1000.0f);
				_velocityController.SetPGain(_Jm*_wcv/_Kt*1.0f);
				_velocityController.SetIGain(_Jm*_wcv/_Kt*_wcv/5.0f);
				
				_canOpenCia402->_statusWord |= CIA_402_SUCCESS_AUTO_TUNING;
			}
			else {
				//	Fail
				_Jm = 0.0f;
				_Fv = 0.0f;
				_Fc = 0.0f;
				_Tl = 0.0f;
				_canOpenCia402->_statusWord &= ~CIA_402_SUCCESS_AUTO_TUNING;
				
			}
			_canOpenCia402->_statusWord |= CIA_402_TARGET_REACHED;
		}
	}
}

float Average (float *d, int32_t n)
{
	float sum = 0.0f;

	for (int32_t i=0; i<n; i++) {
		sum += d[i];
	}
	if (n > 0) return sum/n;
	else       return 0.f;
}

float AverageWoNeg (float *d, int32_t n)
{
	int cnt = 0;
	float sum = 0.0f;

	for (int32_t i=0; i<n; i++) {
		if (d[i] > 0.0f) {
			sum += d[i];
			cnt ++;
		}
	}
	if (cnt > 0) return sum/cnt;
	else         return 0.f;
}

int32_t FindMaxDiff (float *d, int32_t n, float avg)
{
	int32_t max_i = -1;
	float max_diff = 0;

	for (int32_t i=0; i<n; i++) {
		if (d[i] > 0) {
			float diff = fabs (d[i] - avg);

			if (diff > max_diff) {
				max_diff = diff;
				max_i = i;
			}
		}
	}
	return max_i;
}

float AverageWithoutOutlier (float *d, int32_t n, int32_t no_outlier)
{
	for (int32_t i = 0; i < no_outlier; i++) {
		float avg = AverageWoNeg(d, n);
		int32_t id = FindMaxDiff(d, n, avg);

		if (id >= 0) d[id] = -1;
		else         break;
	}

	return AverageWoNeg(d, n);
}

int32_t SquareGenerate (int32_t angle)
{
	int32_t v = 0;

	if      (angle < 90 ) v = +1;
	else if (angle < 180) v =  0;
	else if (angle < 270) v = -1;
	else                  v =  0;

	return v;
}
